// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workflow_gen.proto

package workflow_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//主从库
type DB int32

const (
	//读库
	DB_READ DB = 0
	//写库
	DB_WRITE DB = 1
)

var DB_name = map[int32]string{
	0: "READ",
	1: "WRITE",
}

var DB_value = map[string]int32{
	"READ":  0,
	"WRITE": 1,
}

func (x DB) String() string {
	return proto.EnumName(DB_name, int32(x))
}

func (DB) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{0}
}

type Workflow struct {
	WorkFlowId           int32    `protobuf:"varint,1,opt,name=WorkFlowId,proto3" json:"WorkFlowId,omitempty"`
	FlowName             string   `protobuf:"bytes,2,opt,name=FlowName,proto3" json:"FlowName,omitempty"`
	FlowType             int32    `protobuf:"varint,3,opt,name=FlowType,proto3" json:"FlowType,omitempty"`
	ManagerId            int32    `protobuf:"varint,4,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	Steps                string   `protobuf:"bytes,5,opt,name=Steps,proto3" json:"Steps,omitempty"`
	Forms                string   `protobuf:"bytes,6,opt,name=Forms,proto3" json:"Forms,omitempty"`
	Events               string   `protobuf:"bytes,7,opt,name=Events,proto3" json:"Events,omitempty"`
	FlowGuid             string   `protobuf:"bytes,8,opt,name=FlowGuid,proto3" json:"FlowGuid,omitempty"`
	Status               int32    `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	CreateTime           string   `protobuf:"bytes,10,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Workflow) Reset()         { *m = Workflow{} }
func (m *Workflow) String() string { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()    {}
func (*Workflow) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{0}
}

func (m *Workflow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Workflow.Unmarshal(m, b)
}
func (m *Workflow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Workflow.Marshal(b, m, deterministic)
}
func (m *Workflow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workflow.Merge(m, src)
}
func (m *Workflow) XXX_Size() int {
	return xxx_messageInfo_Workflow.Size(m)
}
func (m *Workflow) XXX_DiscardUnknown() {
	xxx_messageInfo_Workflow.DiscardUnknown(m)
}

var xxx_messageInfo_Workflow proto.InternalMessageInfo

func (m *Workflow) GetWorkFlowId() int32 {
	if m != nil {
		return m.WorkFlowId
	}
	return 0
}

func (m *Workflow) GetFlowName() string {
	if m != nil {
		return m.FlowName
	}
	return ""
}

func (m *Workflow) GetFlowType() int32 {
	if m != nil {
		return m.FlowType
	}
	return 0
}

func (m *Workflow) GetManagerId() int32 {
	if m != nil {
		return m.ManagerId
	}
	return 0
}

func (m *Workflow) GetSteps() string {
	if m != nil {
		return m.Steps
	}
	return ""
}

func (m *Workflow) GetForms() string {
	if m != nil {
		return m.Forms
	}
	return ""
}

func (m *Workflow) GetEvents() string {
	if m != nil {
		return m.Events
	}
	return ""
}

func (m *Workflow) GetFlowGuid() string {
	if m != nil {
		return m.FlowGuid
	}
	return ""
}

func (m *Workflow) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Workflow) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 按条件更新数据
type UpdateAndCondition struct {
	// 更新数据，如果filed对应为空值，则需要在 update_empty_fields 中声明
	Entity *Workflow `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	//查询条件
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// 需要赋空值的字段 大写字段数组
	UpdateEmptyFields    []string `protobuf:"bytes,3,rep,name=update_empty_fields,json=updateEmptyFields,proto3" json:"update_empty_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAndCondition) Reset()         { *m = UpdateAndCondition{} }
func (m *UpdateAndCondition) String() string { return proto.CompactTextString(m) }
func (*UpdateAndCondition) ProtoMessage()    {}
func (*UpdateAndCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{2}
}

func (m *UpdateAndCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAndCondition.Unmarshal(m, b)
}
func (m *UpdateAndCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAndCondition.Marshal(b, m, deterministic)
}
func (m *UpdateAndCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAndCondition.Merge(m, src)
}
func (m *UpdateAndCondition) XXX_Size() int {
	return xxx_messageInfo_UpdateAndCondition.Size(m)
}
func (m *UpdateAndCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAndCondition.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAndCondition proto.InternalMessageInfo

func (m *UpdateAndCondition) GetEntity() *Workflow {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *UpdateAndCondition) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *UpdateAndCondition) GetUpdateEmptyFields() []string {
	if m != nil {
		return m.UpdateEmptyFields
	}
	return nil
}

//按条件查询
type Query struct {
	// 按照实体查询 （和sql查询二选一，sql查询优先使用），如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	EntityQuery *Workflow `protobuf:"bytes,1,opt,name=entity_query,json=entityQuery,proto3" json:"entity_query,omitempty"`
	// 按照sql查询（和实体查询二选一，sql查询优先使用），如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// "id=1 and status in(3,4) and createtime >'2018' "
	SqlQuery string `protobuf:"bytes,2,opt,name=sql_query,json=sqlQuery,proto3" json:"sql_query,omitempty"`
	// 用空值当检索条件的字段 大写字段数组
	QueryEmptyFields []string `protobuf:"bytes,3,rep,name=query_empty_fields,json=queryEmptyFields,proto3" json:"query_empty_fields,omitempty"`
	//排序条件 key值为数据库字段 ["id":"desc","create_time":asc"]
	OrderBy map[string]string `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//是否查询主库，默认不读取 DB.READ
	Db DB `protobuf:"varint,5,opt,name=db,proto3,enum=DB" json:"db,omitempty"`
	//制定select查询的字段，如 "id,username,age"
	SelectField          string   `protobuf:"bytes,6,opt,name=select_field,json=selectField,proto3" json:"select_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{3}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetEntityQuery() *Workflow {
	if m != nil {
		return m.EntityQuery
	}
	return nil
}

func (m *Query) GetSqlQuery() string {
	if m != nil {
		return m.SqlQuery
	}
	return ""
}

func (m *Query) GetQueryEmptyFields() []string {
	if m != nil {
		return m.QueryEmptyFields
	}
	return nil
}

func (m *Query) GetOrderBy() map[string]string {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Query) GetDb() DB {
	if m != nil {
		return m.Db
	}
	return DB_READ
}

func (m *Query) GetSelectField() string {
	if m != nil {
		return m.SelectField
	}
	return ""
}

//分页查询
type PageQuery struct {
	//查询条件
	Query                *Query   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageNum              int32    `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageQuery) Reset()         { *m = PageQuery{} }
func (m *PageQuery) String() string { return proto.CompactTextString(m) }
func (*PageQuery) ProtoMessage()    {}
func (*PageQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{4}
}

func (m *PageQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageQuery.Unmarshal(m, b)
}
func (m *PageQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageQuery.Marshal(b, m, deterministic)
}
func (m *PageQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageQuery.Merge(m, src)
}
func (m *PageQuery) XXX_Size() int {
	return xxx_messageInfo_PageQuery.Size(m)
}
func (m *PageQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_PageQuery.DiscardUnknown(m)
}

var xxx_messageInfo_PageQuery proto.InternalMessageInfo

func (m *PageQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *PageQuery) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageQuery) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

type EntityResult struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *Workflow `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EntityResult) Reset()         { *m = EntityResult{} }
func (m *EntityResult) String() string { return proto.CompactTextString(m) }
func (*EntityResult) ProtoMessage()    {}
func (*EntityResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{5}
}

func (m *EntityResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntityResult.Unmarshal(m, b)
}
func (m *EntityResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntityResult.Marshal(b, m, deterministic)
}
func (m *EntityResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityResult.Merge(m, src)
}
func (m *EntityResult) XXX_Size() int {
	return xxx_messageInfo_EntityResult.Size(m)
}
func (m *EntityResult) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityResult.DiscardUnknown(m)
}

var xxx_messageInfo_EntityResult proto.InternalMessageInfo

func (m *EntityResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EntityResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EntityResult) GetData() *Workflow {
	if m != nil {
		return m.Data
	}
	return nil
}

type ListResult struct {
	Code                 int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 []*Workflow `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListResult) Reset()         { *m = ListResult{} }
func (m *ListResult) String() string { return proto.CompactTextString(m) }
func (*ListResult) ProtoMessage()    {}
func (*ListResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{6}
}

func (m *ListResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResult.Unmarshal(m, b)
}
func (m *ListResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResult.Marshal(b, m, deterministic)
}
func (m *ListResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResult.Merge(m, src)
}
func (m *ListResult) XXX_Size() int {
	return xxx_messageInfo_ListResult.Size(m)
}
func (m *ListResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResult.DiscardUnknown(m)
}

var xxx_messageInfo_ListResult proto.InternalMessageInfo

func (m *ListResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ListResult) GetData() []*Workflow {
	if m != nil {
		return m.Data
	}
	return nil
}

type PageResult struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *WorkflowPageData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PageResult) Reset()         { *m = PageResult{} }
func (m *PageResult) String() string { return proto.CompactTextString(m) }
func (*PageResult) ProtoMessage()    {}
func (*PageResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{7}
}

func (m *PageResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageResult.Unmarshal(m, b)
}
func (m *PageResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageResult.Marshal(b, m, deterministic)
}
func (m *PageResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageResult.Merge(m, src)
}
func (m *PageResult) XXX_Size() int {
	return xxx_messageInfo_PageResult.Size(m)
}
func (m *PageResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PageResult.DiscardUnknown(m)
}

var xxx_messageInfo_PageResult proto.InternalMessageInfo

func (m *PageResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PageResult) GetData() *WorkflowPageData {
	if m != nil {
		return m.Data
	}
	return nil
}

type WorkflowPageData struct {
	CurrentPage          int32       `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Count                int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List                 []*Workflow `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WorkflowPageData) Reset()         { *m = WorkflowPageData{} }
func (m *WorkflowPageData) String() string { return proto.CompactTextString(m) }
func (*WorkflowPageData) ProtoMessage()    {}
func (*WorkflowPageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4957b17e3da92c2, []int{8}
}

func (m *WorkflowPageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowPageData.Unmarshal(m, b)
}
func (m *WorkflowPageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowPageData.Marshal(b, m, deterministic)
}
func (m *WorkflowPageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowPageData.Merge(m, src)
}
func (m *WorkflowPageData) XXX_Size() int {
	return xxx_messageInfo_WorkflowPageData.Size(m)
}
func (m *WorkflowPageData) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowPageData.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowPageData proto.InternalMessageInfo

func (m *WorkflowPageData) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *WorkflowPageData) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *WorkflowPageData) GetList() []*Workflow {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterEnum("DB", DB_name, DB_value)
	proto.RegisterType((*Workflow)(nil), "Workflow")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*UpdateAndCondition)(nil), "UpdateAndCondition")
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterMapType((map[string]string)(nil), "Query.OrderByEntry")
	proto.RegisterType((*PageQuery)(nil), "PageQuery")
	proto.RegisterType((*EntityResult)(nil), "EntityResult")
	proto.RegisterType((*ListResult)(nil), "ListResult")
	proto.RegisterType((*PageResult)(nil), "PageResult")
	proto.RegisterType((*WorkflowPageData)(nil), "WorkflowPageData")
}

func init() { proto.RegisterFile("workflow_gen.proto", fileDescriptor_b4957b17e3da92c2) }

var fileDescriptor_b4957b17e3da92c2 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0x4e, 0x9c, 0x5f, 0x1f, 0x67, 0x43, 0x98, 0xac, 0x56, 0x26, 0xcb, 0xae, 0x82, 0x2b, 0xaa,
	0xa8, 0x42, 0x53, 0x94, 0xde, 0x54, 0xf4, 0x8a, 0x90, 0x80, 0x90, 0x5a, 0x5a, 0x26, 0x54, 0xb4,
	0xbd, 0xb1, 0x9c, 0x78, 0x88, 0x5c, 0xfc, 0x13, 0xec, 0x31, 0xc8, 0x0f, 0xd0, 0x77, 0xe8, 0x03,
	0xf4, 0x45, 0xfa, 0x66, 0xd5, 0xcc, 0xd8, 0x8e, 0x69, 0x72, 0x43, 0xaf, 0x32, 0xdf, 0x77, 0xce,
	0x7c, 0xe7, 0x77, 0x62, 0x40, 0x0f, 0x41, 0x78, 0x7b, 0xe3, 0x06, 0x0f, 0xe6, 0x82, 0xfa, 0x78,
	0x19, 0x06, 0x2c, 0x30, 0xbe, 0x2b, 0xd0, 0xbc, 0x4e, 0x69, 0xf4, 0x3f, 0x00, 0x3f, 0x9f, 0xba,
	0xc1, 0xc3, 0xb9, 0xad, 0x97, 0xfb, 0xe5, 0x41, 0x8d, 0x14, 0x18, 0xd4, 0x83, 0x26, 0x3f, 0x5d,
	0x58, 0x1e, 0xd5, 0x95, 0x7e, 0x79, 0xa0, 0x92, 0x1c, 0x67, 0xb6, 0xab, 0x64, 0x49, 0xf5, 0x8a,
	0xb8, 0x99, 0x63, 0xb4, 0x0b, 0xea, 0x3b, 0xcb, 0xb7, 0x16, 0x34, 0x3c, 0xb7, 0xf5, 0xaa, 0x30,
	0xae, 0x08, 0xf4, 0x37, 0xd4, 0xa6, 0x8c, 0x2e, 0x23, 0xbd, 0x26, 0x24, 0x25, 0xe0, 0xec, 0x69,
	0x10, 0x7a, 0x91, 0x5e, 0x97, 0xac, 0x00, 0xe8, 0x1f, 0xa8, 0x4f, 0xee, 0xa9, 0xcf, 0x22, 0xbd,
	0x21, 0xe8, 0x14, 0x65, 0xd1, 0xcf, 0x62, 0xc7, 0xd6, 0x9b, 0xab, 0xcc, 0x38, 0xe6, 0x77, 0xa6,
	0xcc, 0x62, 0x71, 0xa4, 0xab, 0x22, 0x74, 0x8a, 0x78, 0xb5, 0x27, 0x21, 0xb5, 0x18, 0xbd, 0x72,
	0x3c, 0xaa, 0x83, 0xb8, 0x55, 0x60, 0x8c, 0x11, 0xd4, 0x09, 0x8d, 0x62, 0x97, 0x21, 0x04, 0xd5,
	0x79, 0x60, 0xd3, 0xb4, 0x23, 0xe2, 0x8c, 0x3a, 0x50, 0xf1, 0xa2, 0x45, 0xda, 0x06, 0x7e, 0xe4,
	0x5e, 0xb6, 0xc5, 0x2c, 0x51, 0xbd, 0x4a, 0xc4, 0xd9, 0xf8, 0x56, 0x06, 0xf4, 0x71, 0x69, 0x5b,
	0x8c, 0x1e, 0xfb, 0xf6, 0x49, 0xe0, 0xdb, 0x0e, 0x73, 0x02, 0x1f, 0xed, 0x41, 0x9d, 0xfa, 0xcc,
	0x61, 0x89, 0x90, 0xd4, 0x86, 0x2a, 0xce, 0x66, 0x40, 0x52, 0x03, 0xda, 0x85, 0xda, 0x5d, 0x4c,
	0xc3, 0x44, 0x44, 0xd0, 0x86, 0x75, 0x7c, 0xc9, 0x11, 0x91, 0x24, 0xc2, 0xd0, 0x8d, 0x85, 0xac,
	0x49, 0xbd, 0x25, 0x4b, 0xcc, 0x1b, 0x87, 0xba, 0x76, 0xa4, 0x57, 0xfa, 0x95, 0x81, 0x4a, 0xb6,
	0xa5, 0x69, 0xc2, 0x2d, 0xa7, 0xc2, 0x60, 0xfc, 0x50, 0xa0, 0x26, 0x04, 0xd0, 0x01, 0xb4, 0x64,
	0x04, 0x53, 0xca, 0xaf, 0x25, 0xa0, 0x49, 0xb3, 0xf4, 0xfe, 0x17, 0xd4, 0xe8, 0xce, 0x35, 0x57,
	0x99, 0xa8, 0xa4, 0x19, 0xdd, 0xb9, 0x99, 0x14, 0x12, 0x86, 0x4d, 0x39, 0x74, 0x84, 0xa5, 0x90,
	0x02, 0xc2, 0xd0, 0x0c, 0x42, 0x9b, 0x86, 0xe6, 0x2c, 0xd1, 0xab, 0xfd, 0xca, 0x40, 0x1b, 0x76,
	0x65, 0x4d, 0xf8, 0x3d, 0xa7, 0x47, 0xc9, 0xc4, 0x67, 0x61, 0x42, 0x1a, 0x81, 0x44, 0xa8, 0x0b,
	0x8a, 0x3d, 0x13, 0x3b, 0xd1, 0x1e, 0x56, 0xf0, 0x78, 0x44, 0x14, 0x7b, 0x86, 0xf6, 0xa0, 0x15,
	0x51, 0x97, 0xce, 0x99, 0x8c, 0x96, 0x2e, 0x87, 0x26, 0x39, 0x11, 0xa8, 0x77, 0x04, 0xad, 0xa2,
	0x20, 0x1f, 0xd4, 0x2d, 0x95, 0x75, 0xaa, 0x84, 0x1f, 0xf9, 0x6a, 0xdd, 0x5b, 0x6e, 0x9c, 0xed,
	0xb0, 0x04, 0x47, 0xca, 0xeb, 0xb2, 0xf1, 0x09, 0xd4, 0x0f, 0xd6, 0x82, 0xca, 0xf2, 0xf2, 0x09,
	0x94, 0x37, 0x4d, 0x00, 0x41, 0x75, 0x69, 0x2d, 0xa4, 0x46, 0x8d, 0x88, 0x33, 0xda, 0x81, 0x26,
	0xff, 0x35, 0xfd, 0xd8, 0x4b, 0xdf, 0x40, 0x83, 0xe3, 0x8b, 0xd8, 0x33, 0xa6, 0xd0, 0x9a, 0x88,
	0xbe, 0x3e, 0x69, 0xa5, 0xfe, 0x2b, 0xac, 0xd4, 0xa3, 0x21, 0xc9, 0xed, 0xba, 0x04, 0x78, 0xeb,
	0x44, 0xec, 0x0f, 0x25, 0x2b, 0x9b, 0x24, 0x3f, 0x03, 0xf0, 0x0e, 0x3c, 0x49, 0x72, 0xff, 0x51,
	0x96, 0xdb, 0xb9, 0x24, 0x17, 0x1a, 0x5b, 0xcc, 0x4a, 0xa5, 0xbf, 0x42, 0xe7, 0x77, 0x0b, 0x9f,
	0xe7, 0x3c, 0x0e, 0x43, 0xea, 0x33, 0x53, 0x74, 0x53, 0x06, 0xd2, 0x52, 0x8e, 0xbb, 0xf1, 0x69,
	0xcd, 0x83, 0xd8, 0x67, 0x69, 0xa7, 0x25, 0xe0, 0x65, 0xb8, 0x4e, 0xc4, 0x36, 0x94, 0xc1, 0xe9,
	0x17, 0x3b, 0xa0, 0x8c, 0x47, 0xa8, 0x09, 0x55, 0x32, 0x39, 0x1e, 0x77, 0x4a, 0x48, 0x85, 0xda,
	0x35, 0x39, 0xbf, 0x9a, 0x74, 0xca, 0xc3, 0x9f, 0x0a, 0x6c, 0x65, 0xde, 0x53, 0x1a, 0xde, 0x3b,
	0x73, 0x8a, 0x0e, 0xa0, 0x2d, 0x1f, 0x7e, 0xfe, 0x57, 0xb8, 0x52, 0xec, 0xfd, 0x85, 0x8b, 0x93,
	0x33, 0x4a, 0xe8, 0x10, 0xda, 0xf2, 0x4d, 0xe7, 0xde, 0x5d, 0xbc, 0xfe, 0xc8, 0x7b, 0x0d, 0x9c,
	0xdf, 0x78, 0x0e, 0xda, 0x19, 0x65, 0xb9, 0x7b, 0xba, 0x4a, 0xeb, 0xca, 0x03, 0xd8, 0x2a, 0xf8,
	0xf1, 0xd9, 0xe6, 0xbe, 0x1a, 0x5e, 0x8d, 0xda, 0x28, 0xa1, 0x67, 0xd0, 0x1e, 0x53, 0x97, 0x16,
	0x72, 0xc8, 0x1c, 0x0b, 0x61, 0x0f, 0xa1, 0x5b, 0x90, 0xe3, 0xdd, 0x14, 0x92, 0x80, 0xf3, 0x25,
	0xef, 0x69, 0x78, 0x35, 0x6e, 0xa3, 0x84, 0xf6, 0xa1, 0x53, 0xb8, 0x71, 0x22, 0x5a, 0xbd, 0x2e,
	0x3c, 0xea, 0x7e, 0xd9, 0xc6, 0x2f, 0xdf, 0xe4, 0x9f, 0x13, 0xf1, 0x29, 0x99, 0xd5, 0xc5, 0xcf,
	0xab, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x19, 0xa4, 0xa2, 0x1a, 0x67, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	//创建
	CreateWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*EntityResult, error)
	//1. 按照查询条件更新，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明，如果要更新的是默认值 请使用update_empty_fields 大写字段数组
	UpdateWorkflow(ctx context.Context, in *UpdateAndCondition, opts ...grpc.CallOption) (*Result, error)
	//1. 按照条件查询当个实体，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflow(ctx context.Context, in *Query, opts ...grpc.CallOption) (*EntityResult, error)
	//1. 按照条件查询列表，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListResult, error)
	//1. 按照条件删除，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	DeleteWorkflow(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	//1. 按照条件查询，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error)
	//1. 按照条件查询数量，数量值为result.data，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowCount(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
}

type workflowServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkflowServiceClient(cc *grpc.ClientConn) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) CreateWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*EntityResult, error) {
	out := new(EntityResult)
	err := c.cc.Invoke(ctx, "/WorkflowService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) UpdateWorkflow(ctx context.Context, in *UpdateAndCondition, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/WorkflowService/UpdateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *Query, opts ...grpc.CallOption) (*EntityResult, error) {
	out := new(EntityResult)
	err := c.cc.Invoke(ctx, "/WorkflowService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/WorkflowService/GetWorkflowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) DeleteWorkflow(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/WorkflowService/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error) {
	out := new(PageResult)
	err := c.cc.Invoke(ctx, "/WorkflowService/GetWorkflowPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowCount(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/WorkflowService/GetWorkflowCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
type WorkflowServiceServer interface {
	//创建
	CreateWorkflow(context.Context, *Workflow) (*EntityResult, error)
	//1. 按照查询条件更新，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明，如果要更新的是默认值 请使用update_empty_fields 大写字段数组
	UpdateWorkflow(context.Context, *UpdateAndCondition) (*Result, error)
	//1. 按照条件查询当个实体，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflow(context.Context, *Query) (*EntityResult, error)
	//1. 按照条件查询列表，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowList(context.Context, *Query) (*ListResult, error)
	//1. 按照条件删除，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	DeleteWorkflow(context.Context, *Query) (*Result, error)
	//1. 按照条件查询，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowPageList(context.Context, *PageQuery) (*PageResult, error)
	//1. 按照条件查询数量，数量值为result.data，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetWorkflowCount(context.Context, *Query) (*Result, error)
}

// UnimplementedWorkflowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (*UnimplementedWorkflowServiceServer) CreateWorkflow(ctx context.Context, req *Workflow) (*EntityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) UpdateWorkflow(ctx context.Context, req *UpdateAndCondition) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) GetWorkflow(ctx context.Context, req *Query) (*EntityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) GetWorkflowList(ctx context.Context, req *Query) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowList not implemented")
}
func (*UnimplementedWorkflowServiceServer) DeleteWorkflow(ctx context.Context, req *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedWorkflowServiceServer) GetWorkflowPageList(ctx context.Context, req *PageQuery) (*PageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowPageList not implemented")
}
func (*UnimplementedWorkflowServiceServer) GetWorkflowCount(ctx context.Context, req *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowCount not implemented")
}

func RegisterWorkflowServiceServer(s *grpc.Server, srv WorkflowServiceServer) {
	s.RegisterService(&_WorkflowService_serviceDesc, srv)
}

func _WorkflowService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, req.(*Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_UpdateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAndCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).UpdateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/UpdateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).UpdateWorkflow(ctx, req.(*UpdateAndCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/GetWorkflowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowList(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).DeleteWorkflow(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/GetWorkflowPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowPageList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkflowService/GetWorkflowCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowCount(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowService_CreateWorkflow_Handler,
		},
		{
			MethodName: "UpdateWorkflow",
			Handler:    _WorkflowService_UpdateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowList",
			Handler:    _WorkflowService_GetWorkflowList_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _WorkflowService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowPageList",
			Handler:    _WorkflowService_GetWorkflowPageList_Handler,
		},
		{
			MethodName: "GetWorkflowCount",
			Handler:    _WorkflowService_GetWorkflowCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow_gen.proto",
}
