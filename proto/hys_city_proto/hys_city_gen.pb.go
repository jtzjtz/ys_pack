// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: hys_city_gen.proto

package hys_city_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//主从库
type DB int32

const (
	//读库
	DB_READ DB = 0
	//写库
	DB_WRITE DB = 1
)

// Enum value maps for DB.
var (
	DB_name = map[int32]string{
		0: "READ",
		1: "WRITE",
	}
	DB_value = map[string]int32{
		"READ":  0,
		"WRITE": 1,
	}
)

func (x DB) Enum() *DB {
	p := new(DB)
	*p = x
	return p
}

func (x DB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DB) Descriptor() protoreflect.EnumDescriptor {
	return file_hys_city_gen_proto_enumTypes[0].Descriptor()
}

func (DB) Type() protoreflect.EnumType {
	return &file_hys_city_gen_proto_enumTypes[0]
}

func (x DB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DB.Descriptor instead.
func (DB) EnumDescriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{0}
}

type HysCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Parentid   int32  `protobuf:"varint,2,opt,name=parentid,proto3" json:"parentid,omitempty"`
	Cityname   string `protobuf:"bytes,3,opt,name=cityname,proto3" json:"cityname,omitempty"`
	Regiontype int32  `protobuf:"varint,4,opt,name=regiontype,proto3" json:"regiontype,omitempty"`
	Agencyid   int32  `protobuf:"varint,5,opt,name=agencyid,proto3" json:"agencyid,omitempty"`
}

func (x *HysCity) Reset() {
	*x = HysCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HysCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HysCity) ProtoMessage() {}

func (x *HysCity) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HysCity.ProtoReflect.Descriptor instead.
func (*HysCity) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{0}
}

func (x *HysCity) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HysCity) GetParentid() int32 {
	if x != nil {
		return x.Parentid
	}
	return 0
}

func (x *HysCity) GetCityname() string {
	if x != nil {
		return x.Cityname
	}
	return ""
}

func (x *HysCity) GetRegiontype() int32 {
	if x != nil {
		return x.Regiontype
	}
	return 0
}

func (x *HysCity) GetAgencyid() int32 {
	if x != nil {
		return x.Agencyid
	}
	return 0
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Result) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Result) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 按条件更新数据
type UpdateAndCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新数据，如果filed对应为空值，则需要在 update_empty_fields 中声明
	Entity *HysCity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	//查询条件
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// 需要赋空值的字段 大写字段数组
	UpdateEmptyFields []string `protobuf:"bytes,3,rep,name=update_empty_fields,json=updateEmptyFields,proto3" json:"update_empty_fields,omitempty"`
}

func (x *UpdateAndCondition) Reset() {
	*x = UpdateAndCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAndCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAndCondition) ProtoMessage() {}

func (x *UpdateAndCondition) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAndCondition.ProtoReflect.Descriptor instead.
func (*UpdateAndCondition) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAndCondition) GetEntity() *HysCity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *UpdateAndCondition) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateAndCondition) GetUpdateEmptyFields() []string {
	if x != nil {
		return x.UpdateEmptyFields
	}
	return nil
}

//按条件查询
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 按照实体查询 （和sql查询二选一，sql查询优先使用），如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	EntityQuery *HysCity `protobuf:"bytes,1,opt,name=entity_query,json=entityQuery,proto3" json:"entity_query,omitempty"`
	// 按照sql查询（和实体查询二选一，sql查询优先使用），如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// "id=1 and status in(3,4) and createtime >'2018' "
	SqlQuery string `protobuf:"bytes,2,opt,name=sql_query,json=sqlQuery,proto3" json:"sql_query,omitempty"`
	// 用空值当检索条件的字段 大写字段数组
	QueryEmptyFields []string `protobuf:"bytes,3,rep,name=query_empty_fields,json=queryEmptyFields,proto3" json:"query_empty_fields,omitempty"`
	//排序条件 key值为数据库字段 ["id":"desc","create_time":asc"]
	OrderBy map[string]string `protobuf:"bytes,4,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//是否查询主库，默认不读取 DB.READ
	Db DB `protobuf:"varint,5,opt,name=db,proto3,enum=hys_city_proto.DB" json:"db,omitempty"`
	//制定select查询的字段，如 "id,username,age"
	SelectField string `protobuf:"bytes,6,opt,name=select_field,json=selectField,proto3" json:"select_field,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetEntityQuery() *HysCity {
	if x != nil {
		return x.EntityQuery
	}
	return nil
}

func (x *Query) GetSqlQuery() string {
	if x != nil {
		return x.SqlQuery
	}
	return ""
}

func (x *Query) GetQueryEmptyFields() []string {
	if x != nil {
		return x.QueryEmptyFields
	}
	return nil
}

func (x *Query) GetOrderBy() map[string]string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Query) GetDb() DB {
	if x != nil {
		return x.Db
	}
	return DB_READ
}

func (x *Query) GetSelectField() string {
	if x != nil {
		return x.SelectField
	}
	return ""
}

//分页查询
type PageQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//查询条件
	Query   *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page    int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageNum int32  `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *PageQuery) Reset() {
	*x = PageQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageQuery) ProtoMessage() {}

func (x *PageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageQuery.ProtoReflect.Descriptor instead.
func (*PageQuery) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{4}
}

func (x *PageQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PageQuery) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageQuery) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type EntityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *HysCity `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntityResult) Reset() {
	*x = EntityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityResult) ProtoMessage() {}

func (x *EntityResult) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityResult.ProtoReflect.Descriptor instead.
func (*EntityResult) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{5}
}

func (x *EntityResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EntityResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *EntityResult) GetData() *HysCity {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*HysCity `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListResult) Reset() {
	*x = ListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResult) ProtoMessage() {}

func (x *ListResult) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResult.ProtoReflect.Descriptor instead.
func (*ListResult) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{6}
}

func (x *ListResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ListResult) GetData() []*HysCity {
	if x != nil {
		return x.Data
	}
	return nil
}

type PageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *HysCityPageData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PageResult) Reset() {
	*x = PageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResult) ProtoMessage() {}

func (x *PageResult) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResult.ProtoReflect.Descriptor instead.
func (*PageResult) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{7}
}

func (x *PageResult) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PageResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PageResult) GetData() *HysCityPageData {
	if x != nil {
		return x.Data
	}
	return nil
}

type HysCityPageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32      `protobuf:"varint,1,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Count       int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	List        []*HysCity `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HysCityPageData) Reset() {
	*x = HysCityPageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hys_city_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HysCityPageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HysCityPageData) ProtoMessage() {}

func (x *HysCityPageData) ProtoReflect() protoreflect.Message {
	mi := &file_hys_city_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HysCityPageData.ProtoReflect.Descriptor instead.
func (*HysCityPageData) Descriptor() ([]byte, []int) {
	return file_hys_city_gen_proto_rawDescGZIP(), []int{8}
}

func (x *HysCityPageData) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *HysCityPageData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HysCityPageData) GetList() []*HysCity {
	if x != nil {
		return x.List
	}
	return nil
}

var File_hys_city_gen_proto protoreflect.FileDescriptor

var file_hys_city_gen_proto_rawDesc = []byte{
	0x0a, 0x12, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xd0, 0x02,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x22, 0x0a,
	0x02, 0x64, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x68, 0x79, 0x73, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x42, 0x52, 0x02, 0x64,
	0x62, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x67, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x61, 0x0a, 0x0c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x0f, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x2a,
	0x19, 0x0a, 0x02, 0x44, 0x42, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x32, 0x8a, 0x04, 0x0a, 0x0e, 0x48,
	0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x17,
	0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x68,
	0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x79, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x15, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x68, 0x79,
	0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x73, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x15, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x68, 0x79, 0x73,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x79, 0x73, 0x43, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x68, 0x79, 0x73,
	0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x79, 0x73, 0x43, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e,
	0x68, 0x79, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x3b, 0x68, 0x79,
	0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hys_city_gen_proto_rawDescOnce sync.Once
	file_hys_city_gen_proto_rawDescData = file_hys_city_gen_proto_rawDesc
)

func file_hys_city_gen_proto_rawDescGZIP() []byte {
	file_hys_city_gen_proto_rawDescOnce.Do(func() {
		file_hys_city_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_hys_city_gen_proto_rawDescData)
	})
	return file_hys_city_gen_proto_rawDescData
}

var file_hys_city_gen_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hys_city_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_hys_city_gen_proto_goTypes = []interface{}{
	(DB)(0),                    // 0: hys_city_proto.DB
	(*HysCity)(nil),            // 1: hys_city_proto.HysCity
	(*Result)(nil),             // 2: hys_city_proto.Result
	(*UpdateAndCondition)(nil), // 3: hys_city_proto.UpdateAndCondition
	(*Query)(nil),              // 4: hys_city_proto.Query
	(*PageQuery)(nil),          // 5: hys_city_proto.PageQuery
	(*EntityResult)(nil),       // 6: hys_city_proto.EntityResult
	(*ListResult)(nil),         // 7: hys_city_proto.ListResult
	(*PageResult)(nil),         // 8: hys_city_proto.PageResult
	(*HysCityPageData)(nil),    // 9: hys_city_proto.HysCityPageData
	nil,                        // 10: hys_city_proto.Query.OrderByEntry
}
var file_hys_city_gen_proto_depIdxs = []int32{
	1,  // 0: hys_city_proto.UpdateAndCondition.entity:type_name -> hys_city_proto.HysCity
	4,  // 1: hys_city_proto.UpdateAndCondition.query:type_name -> hys_city_proto.Query
	1,  // 2: hys_city_proto.Query.entity_query:type_name -> hys_city_proto.HysCity
	10, // 3: hys_city_proto.Query.order_by:type_name -> hys_city_proto.Query.OrderByEntry
	0,  // 4: hys_city_proto.Query.db:type_name -> hys_city_proto.DB
	4,  // 5: hys_city_proto.PageQuery.query:type_name -> hys_city_proto.Query
	1,  // 6: hys_city_proto.EntityResult.data:type_name -> hys_city_proto.HysCity
	1,  // 7: hys_city_proto.ListResult.data:type_name -> hys_city_proto.HysCity
	9,  // 8: hys_city_proto.PageResult.data:type_name -> hys_city_proto.HysCityPageData
	1,  // 9: hys_city_proto.HysCityPageData.list:type_name -> hys_city_proto.HysCity
	1,  // 10: hys_city_proto.HysCityService.CreateHysCity:input_type -> hys_city_proto.HysCity
	3,  // 11: hys_city_proto.HysCityService.UpdateHysCity:input_type -> hys_city_proto.UpdateAndCondition
	4,  // 12: hys_city_proto.HysCityService.GetHysCity:input_type -> hys_city_proto.Query
	4,  // 13: hys_city_proto.HysCityService.GetHysCityList:input_type -> hys_city_proto.Query
	4,  // 14: hys_city_proto.HysCityService.DeleteHysCity:input_type -> hys_city_proto.Query
	5,  // 15: hys_city_proto.HysCityService.GetHysCityPageList:input_type -> hys_city_proto.PageQuery
	4,  // 16: hys_city_proto.HysCityService.GetHysCityCount:input_type -> hys_city_proto.Query
	6,  // 17: hys_city_proto.HysCityService.CreateHysCity:output_type -> hys_city_proto.EntityResult
	2,  // 18: hys_city_proto.HysCityService.UpdateHysCity:output_type -> hys_city_proto.Result
	6,  // 19: hys_city_proto.HysCityService.GetHysCity:output_type -> hys_city_proto.EntityResult
	7,  // 20: hys_city_proto.HysCityService.GetHysCityList:output_type -> hys_city_proto.ListResult
	2,  // 21: hys_city_proto.HysCityService.DeleteHysCity:output_type -> hys_city_proto.Result
	8,  // 22: hys_city_proto.HysCityService.GetHysCityPageList:output_type -> hys_city_proto.PageResult
	2,  // 23: hys_city_proto.HysCityService.GetHysCityCount:output_type -> hys_city_proto.Result
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_hys_city_gen_proto_init() }
func file_hys_city_gen_proto_init() {
	if File_hys_city_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hys_city_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HysCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAndCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hys_city_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HysCityPageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hys_city_gen_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hys_city_gen_proto_goTypes,
		DependencyIndexes: file_hys_city_gen_proto_depIdxs,
		EnumInfos:         file_hys_city_gen_proto_enumTypes,
		MessageInfos:      file_hys_city_gen_proto_msgTypes,
	}.Build()
	File_hys_city_gen_proto = out.File
	file_hys_city_gen_proto_rawDesc = nil
	file_hys_city_gen_proto_goTypes = nil
	file_hys_city_gen_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HysCityServiceClient is the client API for HysCityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HysCityServiceClient interface {
	//创建
	CreateHysCity(ctx context.Context, in *HysCity, opts ...grpc.CallOption) (*EntityResult, error)
	//1. 按照查询条件更新，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明，如果要更新的是默认值 请使用update_empty_fields 大写字段数组
	UpdateHysCity(ctx context.Context, in *UpdateAndCondition, opts ...grpc.CallOption) (*Result, error)
	//1. 按照条件查询当个实体，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCity(ctx context.Context, in *Query, opts ...grpc.CallOption) (*EntityResult, error)
	//1. 按照条件查询列表，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListResult, error)
	//1. 按照条件删除，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	DeleteHysCity(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	//1. 按照条件查询，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error)
	//1. 按照条件查询数量，数量值为result.data，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityCount(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
}

type hysCityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHysCityServiceClient(cc grpc.ClientConnInterface) HysCityServiceClient {
	return &hysCityServiceClient{cc}
}

func (c *hysCityServiceClient) CreateHysCity(ctx context.Context, in *HysCity, opts ...grpc.CallOption) (*EntityResult, error) {
	out := new(EntityResult)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/CreateHysCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) UpdateHysCity(ctx context.Context, in *UpdateAndCondition, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/UpdateHysCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) GetHysCity(ctx context.Context, in *Query, opts ...grpc.CallOption) (*EntityResult, error) {
	out := new(EntityResult)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/GetHysCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) GetHysCityList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ListResult, error) {
	out := new(ListResult)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/GetHysCityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) DeleteHysCity(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/DeleteHysCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) GetHysCityPageList(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*PageResult, error) {
	out := new(PageResult)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/GetHysCityPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hysCityServiceClient) GetHysCityCount(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/hys_city_proto.HysCityService/GetHysCityCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HysCityServiceServer is the server API for HysCityService service.
type HysCityServiceServer interface {
	//创建
	CreateHysCity(context.Context, *HysCity) (*EntityResult, error)
	//1. 按照查询条件更新，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明，如果要更新的是默认值 请使用update_empty_fields 大写字段数组
	UpdateHysCity(context.Context, *UpdateAndCondition) (*Result, error)
	//1. 按照条件查询当个实体，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCity(context.Context, *Query) (*EntityResult, error)
	//1. 按照条件查询列表，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityList(context.Context, *Query) (*ListResult, error)
	//1. 按照条件删除，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	DeleteHysCity(context.Context, *Query) (*Result, error)
	//1. 按照条件查询，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityPageList(context.Context, *PageQuery) (*PageResult, error)
	//1. 按照条件查询数量，数量值为result.data，查询可以按照实体查询和sql查询，二选一，sql查询优先使用，
	// 2.如果field对应为空值，则需要在 query_empty_fields 大写字段数组 中声明
	// 3.增加读写库查询判断
	GetHysCityCount(context.Context, *Query) (*Result, error)
}

// UnimplementedHysCityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHysCityServiceServer struct {
}

func (*UnimplementedHysCityServiceServer) CreateHysCity(context.Context, *HysCity) (*EntityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHysCity not implemented")
}
func (*UnimplementedHysCityServiceServer) UpdateHysCity(context.Context, *UpdateAndCondition) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHysCity not implemented")
}
func (*UnimplementedHysCityServiceServer) GetHysCity(context.Context, *Query) (*EntityResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHysCity not implemented")
}
func (*UnimplementedHysCityServiceServer) GetHysCityList(context.Context, *Query) (*ListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHysCityList not implemented")
}
func (*UnimplementedHysCityServiceServer) DeleteHysCity(context.Context, *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHysCity not implemented")
}
func (*UnimplementedHysCityServiceServer) GetHysCityPageList(context.Context, *PageQuery) (*PageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHysCityPageList not implemented")
}
func (*UnimplementedHysCityServiceServer) GetHysCityCount(context.Context, *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHysCityCount not implemented")
}

func RegisterHysCityServiceServer(s *grpc.Server, srv HysCityServiceServer) {
	s.RegisterService(&_HysCityService_serviceDesc, srv)
}

func _HysCityService_CreateHysCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HysCity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).CreateHysCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/CreateHysCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).CreateHysCity(ctx, req.(*HysCity))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_UpdateHysCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAndCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).UpdateHysCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/UpdateHysCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).UpdateHysCity(ctx, req.(*UpdateAndCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_GetHysCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).GetHysCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/GetHysCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).GetHysCity(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_GetHysCityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).GetHysCityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/GetHysCityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).GetHysCityList(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_DeleteHysCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).DeleteHysCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/DeleteHysCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).DeleteHysCity(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_GetHysCityPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).GetHysCityPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/GetHysCityPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).GetHysCityPageList(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _HysCityService_GetHysCityCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HysCityServiceServer).GetHysCityCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hys_city_proto.HysCityService/GetHysCityCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HysCityServiceServer).GetHysCityCount(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _HysCityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hys_city_proto.HysCityService",
	HandlerType: (*HysCityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHysCity",
			Handler:    _HysCityService_CreateHysCity_Handler,
		},
		{
			MethodName: "UpdateHysCity",
			Handler:    _HysCityService_UpdateHysCity_Handler,
		},
		{
			MethodName: "GetHysCity",
			Handler:    _HysCityService_GetHysCity_Handler,
		},
		{
			MethodName: "GetHysCityList",
			Handler:    _HysCityService_GetHysCityList_Handler,
		},
		{
			MethodName: "DeleteHysCity",
			Handler:    _HysCityService_DeleteHysCity_Handler,
		},
		{
			MethodName: "GetHysCityPageList",
			Handler:    _HysCityService_GetHysCityPageList_Handler,
		},
		{
			MethodName: "GetHysCityCount",
			Handler:    _HysCityService_GetHysCityCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hys_city_gen.proto",
}
